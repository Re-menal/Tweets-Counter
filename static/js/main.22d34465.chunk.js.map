{"version":3,"sources":["index.js"],"names":["COLORES","isHw","str","match","countString","fw","hw","c","Math","ceil","Header","props","Results","test","strArray","Array","from","draw","i","length","push","s","join","Items","map","style","color","whiteSpace","toString","className","Input","update","bind","event","this","onStrChange","target","value","cols","rows","id","onKeyUp","React","Component","App","handleStrChange","state","string","setState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAGMA,EAAU,CACd,UACA,UACA,UACA,UACA,WAWF,SAASC,EAAKC,GAEZ,QAAIA,EAAIC,MAAM,kBAQhB,SAASC,EAAYF,GACnB,IADwB,EACpBG,EAAK,EACLC,EAAK,EAFe,cAGRJ,GAHQ,IAGxB,2BAAqB,CAAC,IAAXK,EAAU,QACfN,EAAKM,IAAY,OAANA,EACbD,GAAM,GAEND,KAPoB,8BAUxB,OAAOA,EAAKG,KAAKC,KAAKH,GAKxB,SAASI,EAAOC,GACd,OACE,mCACE,oGACA,+DAAQ,+BAAOP,EAAYO,EAAMT,aAMvC,SAASU,EAAQD,GAMf,IALA,IAAIE,EAAO,GACPC,EAAWC,MAAMC,KAAKL,EAAMT,KAC5Be,EAAO,GAGFC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAAK,CACxCL,EAAKO,KAAKN,EAASI,IACnB,IAAIG,EAAIR,EAAKS,KAAK,KAEdlB,EAAYiB,GAAK,KAAOH,IAAMJ,EAASK,OAAS,KAClDF,EAAKG,KAAKC,GACVR,EAAO,IAMX,IAAMU,EAAQN,EAAKO,KAAI,SAACH,EAAGH,GAAJ,OAErB,aADA,CACA,QAAyBO,MAAO,CAAEC,MAAO1B,EAAQkB,EAAI,GAAKS,WAAY,YAAtE,SAAqFN,GAA1EH,EAAEU,eAEf,OACE,sBAAKC,UAAU,UAAf,UACE,mBAAGA,UAAU,IAAb,yJACA,mBAAGA,UAAU,UAAb,SAAwBN,O,IAQxBO,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,OAAS,EAAKA,OAAOC,KAAZ,gBAFG,E,0CAKnB,SAAOC,GACLC,KAAKvB,MAAMwB,YAAYF,EAAMG,OAAOC,S,oBAEtC,WACE,OACE,sBAAKR,UAAU,OAAf,UACE,mBAAGA,UAAU,IAAb,gFACA,0BAAUS,KAAK,KAAKC,KAAK,KAAKC,GAAG,QAAQC,QAASP,KAAKH,SACvD,mBAAGF,UAAU,IAAb,8MACA,0BAAUS,KAAK,KAAKC,KAAK,c,GAfbG,IAAMC,WAuBpBC,E,kDACJ,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IACDkC,gBAAkB,EAAKA,gBAAgBb,KAArB,gBACvB,EAAKc,MAAQ,CAAET,MAAO,IAHL,E,mDAKnB,SAAgBU,GACdb,KAAKc,SAAS,CAAEX,MAAOU,M,oBAGzB,WACE,OACE,gCACE,cAACrC,EAAD,CAAQR,IAAKgC,KAAKY,MAAMT,QACxB,iCACE,cAACP,EAAD,CAAO5B,IAAKgC,KAAKY,MAAMT,MAAOF,YAAaD,KAAKW,kBAChD,cAACjC,EAAD,CAASV,IAAKgC,KAAKY,MAAMT,WAE3B,sBAAKR,UAAU,QAAf,UACE,oDACA,+BACE,2RACA,wMACA,4I,GAvBMa,IAAMC,WAgCxBM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACP,EAAD,MAEFQ,SAASC,eAAe,U","file":"static/js/main.22d34465.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst COLORES = [\n  \"#FF7E79\",\n  \"#57A2E0\",\n  \"#B77DEB\",\n  \"#42D68A\",\n  \"#F0D296\"\n];\n\n\n// ツイート文字数のカウント\n// function countString(str) {\n//   let parse = twitter.parseTweet(str);  // <- Compile Error\n//   return Math.ceil(parse.weightedLength);\n// }\n\n// 半角かどうか判定\nfunction isHw(str) {\n  //str = (str == null) ? \"\" : str;\n  if (str.match(/^[\\x20-\\x7e]*$/)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nfunction countString(str) {\n  let fw = 0; // 全角文字カウント\n  let hw = 0; // 半角文字カウント\n  for (const c of str) {\n    if (isHw(c) || c === \"\\n\") {\n      hw += 0.5;\n    } else {\n      fw++;\n    }\n  }\n  return fw + Math.ceil(hw);\n}\n\n\n// ヘッダー\nfunction Header(props) {\n  return (\n    <header>\n      <h1>連ツイ用文字数カウント</h1>\n      <p>現在文字数<span>{countString(props.str)}</span></p>\n    </header>\n  );\n}\n\n// textarea の value を受け取って区切った文字列を描画\nfunction Results(props) {\n  let test = []; // 140 字で区切るための配列\n  let strArray = Array.from(props.str); // props.str を各文字に分解した配列\n  let draw = []; // DOM に追加する文字列を格納\n\n  // str を 140 字区切りで分割\n  for (let i = 0; i < strArray.length; i++) {\n    test.push(strArray[i]);\n    let s = test.join(\"\");\n    // s が140 文字を超えたら or 最後の文字になったら\n    if (countString(s) > 140 || i === strArray.length - 1) {\n      draw.push(s);\n      test = [];\n      continue;\n    }\n  }\n\n  // draw の各要素を描画\n  const Items = draw.map((s, i) =>\n    //<span key={i.toString()} style={{ color: COLORES[i % 5] }}>{s.replace(/\\n/g, '<br>')}</span>\n    <span key={i.toString()} style={{ color: COLORES[i % 5] , whiteSpace: \"pre-wrap\" }}>{s}</span>\n  );\n  return (\n    <div className=\"results\">\n      <p className=\"p\">区切り（1ツイート分ごとに文の色が変わります）：</p>\n      <p className=\"display\">{Items}</p>\n    </div>\n  );\n\n}\n\n\n// 入力コンポーネント\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.update = this.update.bind(this);\n  }\n  // App の state を変更\n  update(event) {\n    this.props.onStrChange(event.target.value);\n  }\n  render() {\n    return (\n      <div className=\"text\">\n        <p className=\"p\">ここに入力してください</p>\n        <textarea cols=\"40\" rows=\"12\" id=\"input\" onKeyUp={this.update}></textarea>\n        <p className=\"p\">一時的に文章をコピペしておける場所です（カウントに含まれません）</p>\n        <textarea cols=\"40\" rows=\"12\"></textarea>\n      </div>\n    );\n  }\n}\n\n\n// メインコンポーネント\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleStrChange = this.handleStrChange.bind(this);\n    this.state = { value: \"\" };\n  }\n  handleStrChange(string) {\n    this.setState({ value: string });\n  }\n  // state をリフトアップ\n  render() {\n    return (\n      <div>\n        <Header str={this.state.value} />\n        <main>\n          <Input str={this.state.value} onStrChange={this.handleStrChange} />\n          <Results str={this.state.value} />\n        </main>\n        <div className=\"usage\">\n          <h2>使い方</h2>\n          <ul>\n            <li>「区切り」の欄は、入力された文字列を文字色によって140字区切りにして表示するものです。</li>\n            <li>全角を1文字、半角と改行を0.5文字としてカウントしています。</li>\n            <li>URLと絵文字には対応していません。</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\n// レンダー\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// function pre_App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n"],"sourceRoot":""}